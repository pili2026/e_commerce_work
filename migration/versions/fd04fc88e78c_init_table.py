"""Init  table

Revision ID: fd04fc88e78c
Revises: 
Create Date: 2024-07-14 22:21:05.815763

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "fd04fc88e78c"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "products",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("stock", sa.Integer(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_products")),
        sa.UniqueConstraint("name", name=op.f("uq_products_name")),
    )
    op.create_table(
        "role_permissions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("role", sa.Enum("MANAGER", "CUSTOMER", name="role_name_enum"), nullable=False),
        sa.Column(
            "permission",
            sa.Enum(
                "CREATE_PRODUCT",
                "READ_PRODUCT",
                "UPDATE_PRODUCT",
                "DELETE_PRODUCT",
                "CREATE_ORDER",
                "READ_OWN_ORDER",
                "READ_ALL_ORDERS",
                "UPDATE_ORDER",
                "DELETE_ORDER",
                name="permission_name_enum",
            ),
            nullable=False,
        ),
        sa.Column("created_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_role_permissions")),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("account", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("role", sa.Enum("MANAGER", "CUSTOMER", name="role_name_enum"), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("account", name=op.f("uq_users_account")),
    )
    op.create_table(
        "auth_sessions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("issue_at", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("access_token", sa.Text(), nullable=False),
        sa.Column("access_token_expire_at", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("refresh_token", sa.Text(), nullable=False),
        sa.Column("refresh_token_expire_at", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_auth_sessions_user_id_users"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_auth_sessions")),
    )
    op.create_table(
        "orders",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("status", sa.Enum("PROCESSING", "CANCELLED", name="order_status_enum"), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("fk_orders_user_id_users"), ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_orders")),
    )
    op.create_table(
        "order_details",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("order_id", sa.UUID(), nullable=False),
        sa.Column("product_id", sa.UUID(), nullable=False),
        sa.Column("product_name", sa.String(), nullable=False),
        sa.Column("product_price", sa.Float(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("total_price", sa.Float(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=3), nullable=False),
        sa.ForeignKeyConstraint(
            ["order_id"], ["orders.id"], name=op.f("fk_order_details_order_id_orders"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["product_id"], ["products.id"], name=op.f("fk_order_details_product_id_products"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_order_details")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("order_details")
    op.drop_table("orders")
    op.drop_table("auth_sessions")
    op.drop_table("users")
    op.drop_table("role_permissions")
    op.drop_table("products")
    # ### end Alembic commands ###
    sa.Enum(name="role_name_enum").drop(op.get_bind(), checkfirst=False)
    sa.Enum(name="permission_name_enum").drop(op.get_bind(), checkfirst=False)
    sa.Enum(name="order_status_enum").drop(op.get_bind(), checkfirst=False)
